<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftwareDevelopment.Programming.CSharp.Utilities</name>
    </assembly>
    <members>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.ConfigurationUtils">
            <summary>
            Util class for common application config file operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ConfigurationUtils.GetConfigurationFileAppSettingValue(System.String,System.Boolean,System.Security.Cryptography.RSAParameters)">
            <summary>
            Returns application config file value with provided key, which is decrypted or not according to the second method parameter.
            </summary>
            <param name="key">appSetting key</param>
            <param name="decrypted">specifies whether value is decrypted or open text value</param>
            <param name="userRsaPrivateKey">user private key to decrypt data</param>
            <returns>open text value</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ConfigurationUtils.GetConfigurationFileAppSettingValue(System.String,System.Boolean,System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Returns application config file value with provided key, which is decrypted or not according to the second method parameter.
            </summary>
            <param name="key">appSetting key</param>
            <param name="decrypted">specifies whether value is decrypted or open text value</param>
            <param name="externalConfigurationFileFullPath">path to external application configuration file</param>
            <param name="userRsaPrivateKey">user private key to decrypt data</param>
            <returns>open text value</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ConfigurationUtils.GetConfigurationFileConnectionStringValue(System.String,System.Boolean,System.Security.Cryptography.RSAParameters)">
            <summary>
            Returns application config file value with provided key, which is decrypted or not according to the second method parameter.
            </summary>
            <param name="key">connectionString setting key</param>
            <param name="decrypted">specifies whether value is decrypted or open text value</param>
            <param name="userRsaPrivateKey">user private key to decrypt data</param>
            <returns>open text value</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ConfigurationUtils.GetConfigurationFileConnectionStringValue(System.String,System.Boolean,System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Returns application config file value with provided key, which is decrypted or not according to the second method parameter.
            </summary>
            <param name="key">connectionString setting key</param>
            <param name="decrypted">specifies whether value is decrypted or open text value</param>
            <param name="externalConfigurationFileFullPath">path to external application configuration file</param>
            <param name="userRsaPrivateKey">user private key to decrypt data</param>
            <returns>open text value</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils">
            <summary>
            Util class for common ADO .NET operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.OpenDatabaseConnection(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Opens IDbConnection object.
            </summary>
            <param name="connection">connection object that is derived from IDbConnection</param>
            <param name="logOpendConnection">specifies whether put information about opening connection to the default application output</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CloseDataReader(System.Data.IDataReader)">
            <summary>
            Closes .NET sql reader.
            </summary>
            <param name="reader">.NET sql reader object to close</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateAndOptionallyOpenConnection(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns SqlConnection object.
            </summary>
            <param name="sqlConnectionString">connection string</param>
            <param name="openConnection">specifies whether additionaly open beforehand created connection</param>
            <param name="logOpendConnection">specifies whether put information about opening connection to the default application output</param>
            <returns>SqlConnection object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateAndOptionallyOpenSqlServerConnection(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns SqlConnection object.
            </summary>
            <param name="sqlConnectionString">connection string</param>
            <param name="openConnection">specifies whether additionaly open beforehand created connection</param>
            <param name="logOpendConnection">specifies whether put information about opening connection to the default application output</param>
            <returns>SqlConnection object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CloseSqlServerDatabaseConnection(System.Data.SqlClient.SqlConnection@)">
            <summary>
            Closes .NET connection.
            </summary>
            <param name="connection">.NET connection object to close</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CloseSqlServerDatabaseConnection(System.Data.SqlClient.SqlConnection@,System.Boolean)">
            <summary>
            Closes .NET connection.
            </summary>
            <param name="connection">.NET connection object to close</param>
            <param name="releaseResources">specifies whether release resources after closing connection</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateAndOptionallyOpenMySqlConnection(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns .NET wrapper for MySql connection object.
            </summary>
            <param name="sqlConnectionString">connection string</param>
            <param name="openConnection">specifies whether additionaly open beforehand created connection</param>
            <param name="logOpendConnection">specifies whether put information about opening connection to the default application output</param>
            <returns>MySqlConnection object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CloseMySqlDatabaseConnection(MySql.Data.MySqlClient.MySqlConnection@)">
            <summary>
            Closes .NET sql wrapper for MySql connection.
            </summary>
            <param name="connection">reference to .NET sql wrapper for MySql connection</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CloseMySqlDatabaseConnection(MySql.Data.MySqlClient.MySqlConnection@,System.Boolean)">
            <summary>
            Closes .NET sql wrapper for MySql connection.
            </summary>
            <param name="connection">reference to .NET sql wrapper for MySql connection</param>
            <param name="releaseResources">specifies whether release resources after closing connection</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.ConvertSqlQueryIntoXmlCapableQuery(System.String,System.String,System.Boolean)">
            <summary>
            Converts sql query string containing FOR XML clause into sql query string, that is capable of returning XML data from within ADO. NET C# object.
            It simply creates T-SQL XML type variable that holds the xml output from query execution.
            In case sqlQuery variable does not contain FOR XML clause, appropriate exception is thrown.
            </summary>
            <param name="sqlQuery">sql input query string</param>
            <param name="xmlVariableNameToStoreXmlQuery">variable to store sql input query result</param>
            <param name="generateSelectQuery">whether to generate SQL SELECT clause</param>
            <returns>modified input query capable of returning xml data</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateSQLInsertQuery(System.String,System.String[],System.String[][],System.Type[],SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeInsertType)">
            <summary>
            Creates valid T-SQL INSERT query in one of two ways: [INSERT ... VALUES(...)] or [INSERT .... SELECT ... UNION ALL ... SELECT ...].
            </summary>
            <param name="tableName">name of a table</param>
            <param name="arrayOfRowDataArray">array of arrays of row data</param>
            <param name="columnArray">array of columns</param>
            <param name="typeArray">array holding types for each column</param>
            <param name="operationTypeInsertType">type of INSERT</param>
            <returns>string containing INSERT query</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateSQLDeleteQuery(System.String,System.String[],System.String[],System.Type[],System.String[])">
            <summary>
            Creates valid T-SQL DELETE query.
            </summary>
            <param name="tableName">name of a table</param>
            <param name="columnArray">array of columns</param>
            <param name="columnDataArray">array of data for each colummn</param>
            <param name="typeArray">array holding types for each column</param>
            <param name="sqlAndOrOperatorArray">array of operators for (column, column data) pairs. Applicable for columns ranging from 1 to array.Length-2</param>
            <returns>SQL DELETE query</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateSQLUpdateQuery(System.String,System.String[],System.String[],System.String[],System.String[],System.Type[],System.Type[],System.String[])">
            <summary>
            Creates valid T-SQL UPDATE query.
            </summary>
            <param name="tableName">name of a table</param>
            <param name="setClauseColumnArray">array of columns of SET clause</param>
            <param name="setClauseColumnDataArray">array of data of columns of SET clause</param>
            <param name="whereClauseColumnArray">array of columns of SET clause</param>
            <param name="whereClauseColumnDataArray">array of data of columns of SET clause</param>
            <param name="setTypeArray">array of types of SET columns</param>
            <param name="whereTypeArray">array of types of WHERE columns</param>
            <param name="sqlAndOrOperatorArray">array of operators for (column, column data) pairs. Applicable for columns ranging from 1 to array.Length-2</param>
            <returns>SQL DELETE query</returns>       
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.CreateSqlCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Int32)">
            <summary>
            Creates SqlCommand object.
            </summary>
            <param name="connection">valid SqlConnection object</param>
            <param name="commandText">sql query string</param>
            <param name="commandType">type of Sql command</param>
            <param name="commandTimeout">time for executing query</param>
            <returns>SqlCommand object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.PrepareSQLStoredProcedure(System.Data.SqlClient.SqlCommand,System.String[],System.String[])">
            <summary>
            Prepares ADO .NET SqlCommand procedure object by passing two arrays, parameters and values respectively.
            Function parameters are self-explaining.
            </summary>
            <param name="sqlCommand">valid SqlCommand object</param>
            <param name="parameterArray">array of parameters</param>
            <param name="parameterArrayValues">array of parameters values</param>
            <returns>SqlCommand object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DatabaseUtils.PrepareSQLStoredProcedureParameter(System.String[][],System.String,System.String)">
            <summary>
            Prepares ADO .NET SqlCommand procedure object by passing two arrays, parameters and values respectively.
            </summary>
            <param name="arrayOfArraysOfItems">Intended for creating server side table based on this array of arrays.(kind of PIVOT function in T-SQL)</param>
            <param name="arraySeparator">arrayOfItems separator</param>
            <param name="arrayItemSeparator">single array item separator</param>
            <returns>string consisting of T-SQL procedure parameter</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils">
            <summary>
            Util class for common DateTime operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils.DateTimeToString(System.String,System.DateTime)">
            <summary>
            Returns string representation of provided DateTime object formatted with provided format.
            </summary>
            <param name="format">Custom date, time or dateTime format that is recognized by .NET</param>
            <param name="dateTime">DateTime instance object</param>
            <returns>string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils.StringToDateTime(System.String)">
            <summary>
            Converts string representation to DateTime object.
            </summary>
            <param name="dateTime">DateTime object in the form of 'yyyy-MM-dd'</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils.ConvertUnixTimestampToDateTime(System.Double)">
            <summary>
            Converts unix timestamp to DateTime.
            </summary>
            <param name="unixTimestamp">unix timestamp</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils.ConvertDateTimeToUnixTimestamp(System.DateTime)">
            <summary>
            Converts DateTime to unix timestamp.
            </summary>
            <param name="dateTime">DateTime object</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.DateTimeUtils.ConvertDateTimeToUnixTimestamp(System.String)">
            <summary>
            Converts DateTime to unix timestamp.
            </summary>
            <param name="dateTime">string representation of DateTime object</param>
            <returns></returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils">
            <summary>
            Util class for common email operations.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.CREDENTIAL_USER">
            <summary>
            credential user
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.CREDENTIAL_PASSWORD">
            <summary>
            credential password
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.HOST">
            <summary>
            host
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.PORT">
            <summary>
            port
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.CONNECTION_TIMEOUT">
            <summary>
            connection timeout
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.SENDER">
            <summary>
            sender
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.SENDER_FRIENDLY_NAME">
            <summary>
            sender friendly name
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.MAIL_SUBJECT">
            <summary>
            mail subject
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.#cctor">
             <summary>
            try-catch acts as as simple precaution in case you just need to use other util method rather than sending email, in which case exception will probably be thrown due to lack of config file.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.GetRecipientsAndTheirAliases(System.String,System.Char,System.Boolean,System.String,System.String,System.Char,System.Char,System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EmailUtils.SendEmail(System.String,System.String,System.String[],System.String[],System.String,System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Net.Mail.SmtpDeliveryMethod,System.Boolean,System.String[])">
            <summary>
            Sends email to desired recipients with ability to provide one or multiple attachements.
            Bcc feature to be implemented in the future versions of this library.
            </summary>
            <param name="sender">email address of sender of this email</param>
            <param name="senderAlias">friendly name of sender of this email</param>
            <param name="recipients">array of recipients of this email</param>
            <param name="recipientsAliases">array of friendly names of recipients of this email</param>
            <param name="subject">email subject</param>
            <param name="mailContent">email content</param>
            <param name="connectionTiemout">time in which email should be send to recipients</param>
            <param name="host">host</param>
            <param name="port">port</param>
            <param name="renderAsHTML">whether to send email as HTML content or plain text</param>
            <param name="useDefaultCredentials">whether to use credentials associated with the user in which context of email is being send or not</param>
            <param name="credentialUser">user name having sufficient privilages allowing for sending email</param>
            <param name="credentialPassword">user password associated with the user</param>
            <param name="smtpDeliveryMethod">method of sending email</param>
            <param name="enableSsl">whether to enable SSL or not</param>
            <param name="attachementFilePathArray">array of full path file to be send as attachement</param>
            <returns>void</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils">
            <summary>
            Util class for common encryption and decryption operations.
            </summary>
        </member>
        <member name="P:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.RSA_PRIVATE_USER_KEY">
            <summary>
            RSA private user key.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.InitializeRsaPrivateUserKey(System.Security.Cryptography.RSAParameters)">
            <summary>
            Initializes RSA private user key.
            </summary>
            <param name="rsaPrivateUserKey">RSA private user key to decrypt data</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.Encrypt(System.String)">
             <summary>
             Encrypts input string according to internal RSACryptoServiceProvider alghoritm.
             </summary>
             <param name="openTextString">text to be encrypted</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.Encrypt(System.Security.Cryptography.RSAParameters,System.String)">
             <summary>
             Encrypts input string according to internal RSACryptoServiceProvider alghoritm.
             </summary>
             <param name="userRsaPublicKey">user public key to encrypt data</param>
             <param name="openTextString">text to be encrypted</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.Decrypt(System.String)">
             <summary>
             Decrypts input string according to internal RSACryptoServiceProvider alghoritm.
             </summary>
             <param name="encryptedTextString">text to be decrypted</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.Decrypt(System.Security.Cryptography.RSAParameters,System.String)">
             <summary>
             Decrypts input string according to internal RSACryptoServiceProvider alghoritm.
             </summary>
             <param name="userRsaPrivateKey">user private key to decrypt data</param>
             <param name="encryptedTextString">text to be decrypted</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.EncryptionDecryptionUtils.ThrowExceptionIfRsaPrivateUserKeyIsNotInitialized">
            <summary>
            Throws exception in case user private key is not initialized.
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeEnum">
            <summary>
            Type of operation.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeEnum.INSERT">
            <summary>
            Represents SQL INSERT operation
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeEnum.UPDATE">
            <summary>
            Represents SQL UPDATE operation
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeEnum.DELETE">
            <summary>
            Represents SQL DELETE operation
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeEnum.LOG">
            <summary>
            Represents logging operation
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeInsertType">
            <summary>
            Type of INSERT operation to create.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeInsertType.SELECT_UNION">
            <summary>
            Represents SQL INSERT type of query
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.OperationTypeInsertType.INSERT_VALUES">
            <summary>
            Represents SQL INSERT type of query
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion">
            <summary>
            Microsoft Excel connection string versions.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_STANDARD_CONNECTION_STRING">
            <summary>
            Standard (Excel 97-2003) [Microsoft Jet OLE DB 4.0].
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_STANDARD_ALTERNATIVE_CONNECTION_STRING">
            <summary>
            Standard alternative (Excel 97-2003) [Microsoft Jet OLE DB 4.0].
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSX_CONNECTION_STRING_WITH_HEADER_ROW">
            <summary>
            Connect to Excel 2007 and later files with the xlsx file extension [Microsoft ACE OLEDB 12.0].
            This option assumes that first row of the spreadsheet is a header row consisting of columns names.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSX_CONNECTION_STRING_WITH_DATA_ONLY">
            <summary>
            Connect to Excel 2007 and later files with the xlsx file extension [Microsoft ACE OLEDB 12.0].
            This option assumes that there is no header row consisting of column names. The whole spreadsheet contains data only.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSB_CONNECTION_STRING_WITH_HEADER_ROW">
            <summary>
            Connect to Excel 2007 and later files with the xlsb file extension [Microsoft ACE OLEDB 12.0].
            That is the Office Open XML format saved in a binary format.
            The structure is similar but it is not saved in a text readable format as the xlsx files and can improve performance if the file contains lots of data.
            This option assumes that first row of the spreadsheet is a header row consisting of columns names.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSB_CONNECTION_STRING_WITH_DATA_ONLY">
            <summary>
            Connect to Excel 2007 and later files with the xlsb file extension [Microsoft ACE OLEDB 12.0].
            That is the Office Open XML format saved in a binary format.
            The structure is similar but it is not saved in a text readable format as the xlsx files and can improve performance if the file contains lots of data.
            This option assumes that there is no header row consisting of column names. The whole spreadsheet contains data only.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSM_CONNECTION_STRING_WITH_HEADER_ROW">
            <summary>
            Connect to Excel 2007 and later files with the xlsm file extension [Microsoft ACE OLEDB 12.0].
            This option assumes that first row of the spreadsheet is a header row consisting of columns names.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSM_CONNECTION_STRING_WITH_DATA_ONLY">
            <summary>
            Connect to Excel 2007 and later files with the xlsm file extension [Microsoft ACE OLEDB 12.0].
            This option assumes that there is no header row consisting of column names. The whole spreadsheet contains data only.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_97_2003_XLS_CONNECTION_STRING_WITH_HEADER_ROW">
            <summary>
            You can use this connection string to use the Microsoft Office 2007 OLEDB driver to connect to older 97-2003 Excel workbooks [Microsoft ACE OLEDB 12.0].
            This option assumes that first row of the spreadsheet is a header row consisting of columns names.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_97_2003_XLS_CONNECTION_STRING_WITH_DATA_ONLY">
            <summary>
            You can use this connection string to use the Microsoft Office 2007 OLEDB driver to connect to older 97-2003 Excel workbooks [Microsoft ACE OLEDB 12.0].
            This option assumes that there is no header row consisting of column names. The whole spreadsheet contains data only.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion.EXCEL_2007_AND_LATER_XLSX_TEXT_CONNECTION_STRING">
            <summary>
            Connect to Excel 2007 and later files with the xlsx file extension.
            Use this option when you want to treat all data in the file as text, overriding Excels column type [Microsoft ACE OLEDB 12.0].
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum">
            <summary>
            Type of log operation.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum.INFO">
            <summary>
            Represents logging info message
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum.WARNING">
            <summary>
            Represents logging warning message
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum.ERROR">
            <summary>
            Represents logging error message
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType">
            <summary>
            Type of Windows log operation.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType.Application">
            <summary>
            Represents Application log type
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType.Security">
            <summary>
            Represents Security log type
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType.Setup">
            <summary>
            Represents Setup log type
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType.System">
            <summary>
            Represents System log type
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils">
            <summary>
            Util class for common Excel operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.GetConnectionStringForExcelVersion(SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion,System.String,System.String@)">
            <summary>
            Initializes Microsoft Excel connection string for specific Excel version.
            </summary>
            <param name="excelVersion">version of Microsoft Excel</param>
            <param name="fileName">path to Excel file</param>
            <param name="excelConnectionString">this variable will be initialized with correct Excel version</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.ReadExcelFromFile(System.String,SoftwareDevelopment.Programming.CSharp.Utilities.ExcelVersion,System.String[],System.Boolean)">
            <summary>
            Retrieves DataSet object consisting of all worksheets converted to DataTable objects.
            Tables in the returned DataSet object are named after exactWorkbookNameArray values respectively.
            </summary>
            <param name="pathToExcelFile">relative or absolute path to Excel file</param>
            <param name="excelVersion">version of Microsoft Excel</param>
            <param name="exactWorkbookNameArray">exact workbook name array</param>
            <param name="isRelativePath">specifies wheter excel file resides in the application executing directory</param>
            <returns>DataSet consisting of all worksheets converted to DataTable objects</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.LoadDataFromTextFile(System.String,System.Collections.Generic.List{System.String}@,System.Char,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Loads content of a text file with CSV-like format into DataTable object.
            </summary>
            <param name="fullPathToFile">full path to table</param>
            <param name="listOfRowsNotComplyingWithNumberOfColumns">returns list of lines not complying with number of columns</param>
            <param name="separator">CSV-like format separator</param>
            <param name="firstLineIsTableHeader">specifies whether first line is a columns header</param>
            <param name="applyRowTrimmingOrExtendingInsteadOfLogging">specifies whether add empty values for row with missing columns, or cut out row columns that overflow last header column</param>
            <param name="userProvidedNumberOfTableColumns">user provided number of columns in case data file is missing columns header</param>
            <param name="userProvidedTableColumnPrefix">user provided table column prefix in case text file is missing columns header</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.RetrieveDataTableColumnsNamesArray(System.Data.DataTable)">
            <summary>
            Retrieves array of columns names.
            </summary>
            <param name="dataTable">DataTable to retrieve data from</param>
            <returns>array of strings</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.RetrieveDataTableColumnsTypesArray(System.Data.DataTable)">
            <summary>
            Retrieves array of columns types.
            </summary>
            <param name="dataTable">DataTable to retrieve data from</param>
            <returns>array of Type</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExcelUtils.CheckIfAnyExcelWorksheetContainsData(System.Data.DataTableCollection)">
            <summary>
            Returns true or false depending on whether DataTableCollection contains any rows.
            </summary>
            <param name="dataTableCollection">collection of DataTable objects</param>
            <returns>bool</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils">
            <summary>
            Util class for exception throwing operations.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.ArgumentNullException_MessageFormat">
            <summary>
            Value for this parameter is null or empty '{0}'. Provide value instead.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.FormatException_MessageFormat">
            <summary>
            File '{0}' extension should end with dot and have 3 to 4 letters. Provide valid extension instead.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.ConfigurationErrors_MessageFormat">
            <summary>
            Configuration error: '{0}' key value is missing '{1}' variable that should be put after '{2}' flag.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.InvalidOperationExceptionMessageFormat">
            <summary>
            This operation is invalid because parameter '{0}' is set to 'false'.\r\nTo perform this operation set this paramter to 'true'.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.InvalidOperationExceptionMessageFormat2">
            <summary>
            This operation is invalid because operation type '{0}' does not allow following clauses: '{1}', '{2}'. They are reeserved for DELETE or UPDATE.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.InvalidOperationExceptionMessageFormat3">
            <summary>
            Number of supplied '{0}' per row exceeds the number of specified '{1}'.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.SqlInjectionException_MessageFormat">
            <summary>
            Possible SQL Injection attact: '{0}'.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.NotImplementedException_MessageFormat">
            <summary>
            Future reserved feature.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.Format(System.String,System.Object[])">
            <summary>
            Formats exception message according to provided format. 
            </summary>
            <param name="format">exception message format</param>
            <param name="args">exception message format placeholders values array</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ExceptionUtils.CreateException(System.String,System.Object[])">
            <summary>
            Creates exception message with given format and values.
            </summary>
            <param name="format">exception message format</param>
            <param name="args">exception message format placeholders values array</param>
            <returns></returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils">
            <summary>
            Util class for common file and directory operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.ComposeFileNameWithoutExtension(System.String[])">
            <summary>
            Creates file name based on provided array of strings.
            </summary>
            <param name="fileNamePartsWithoutDotAndExtension">array of strings</param>
            <returns>file name</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.ComposeFullPath(System.String,System.String)">
            <summary>
            Creates full path to file or subdirectory.
            </summary>
            <param name="directory">name of a directory</param>
            <param name="fileOrDirectoryName">name of a file or subdirectory</param>
            <returns>full path of a file</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.GetFileNameWithExtension(System.String)">
            <summary>
            Returns file name with extension part of a file path.
            </summary>
            <param name="path">path to file</param>
            <returns>file name with extension</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.GetFileNameAndExtensionSplitted(System.String)">
            <summary>
            Returns string array of file name and extension.
            </summary>
            <param name="fileNameWithExtension">file name with extension</param>
            <returns>string array of file name and extension</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.GetFileInfo(System.String)">
            <summary>
            Returns FileInfo object based on provided file path.
            </summary>
            <param name="fullPapthToFile">full path to file</param>
            <returns>FileInfo object based on provided file path</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.GetFiles(System.String,System.String)">
            <summary>
            Returns array of file paths for given directory name and search pattern.
            </summary>
            <param name="directoryNameFullPath">full path to directory</param>
            <param name="searchPattern">search pattern</param>
            <returns>array of file path for given directory name and search pattern</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.FilesArrayApplyDateFilter(System.String[],System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Filters array of file paths and returns only those whose creation date is between start and end date.
            </summary>
            <param name="files">array of file paths</param>
            <param name="fromDate">start date</param>
            <param name="toDate">end date</param>
            <param name="withoutMinutesAndSeconds">whether to filter files based on date part only</param>
            <returns>filtered array of file paths</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateFileName(System.String,System.String)">
            <summary>
            Creates file name with given file name and extension separated.
            </summary>
            <param name="fileNameWithoutExtension"> file name part</param>
            <param name="dotWithExtension">extension of the file including dot</param>
            <returns>combined file name and extension including dot</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateFile(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates a file physically on provided storage with some content.
            </summary>
            <param name="fileName">name of a file</param>
            <param name="fileContent">content of a file</param>
            <param name="isLocalPath">whether directory of a file is a currently executing assembly directory or not</param>
            <param name="pathToFileDirectory">full path to a file directory</param>
            <returns>full path to physical file</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.MoveFileIfExists(System.String,System.String)">
            <summary>
            Moves file to another location provided that file specified in the first parameter actually exists.
            </summary>
            <param name="fileName">full path to a file</param>
            <param name="fullPath">location to move the file to</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CopyFileIfExists(System.String,System.String,System.Boolean)">
            <summary>
            Copies file to another location provided that file specified in the first parameter actually exists.
            </summary>
            <param name="fileName">full path to a file</param>
            <param name="fullPath">location to copy the file to</param>
            <param name="overrideExistingOne">override existing file</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateOrOverrideExistingFile(System.String,System.Boolean)">
            <summary>
            Creates or overrides file.
            </summary>
            <param name="fullPath">full path to a file</param>
            <param name="overrideExistingOne">whether to override existing file or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateOrOverrideExistingDirectory(System.String,System.Boolean)">
            <summary>
            Creates or overrides directory.
            </summary>
            <param name="fullPath">full path to a directory</param>
            <param name="overrideExistingOne">whether to override existing directory or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateStream(System.String)">
            <summary>
            Creates readonly stream to a file.
            </summary>
            <param name="path">full path to a file</param>
            <returns>FileStream object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates stream to a file with given fileMode and fileAccess.
            </summary>
            <param name="path">full path to a file</param>
            <param name="fileMode">file mode of the stream</param>
            <param name="fileAccess">file access of the file</param>
            <returns>FileStream object</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CloseStream(System.IO.Stream)">
            <summary>
            Closes a stream.
            </summary>
            <param name="stream">stream to close</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.GetDirectoryName(System.String)">
            <summary>
            Returns directory name for provided path.
            </summary>
            <param name="path">directory path</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateDirectoryTree(System.String,System.String[],System.Boolean)">
            <summary>
            Creates directory tree. i.e. dir1/dir2/dir3/dir4  etc.
            </summary>
            <param name="rootDirectory">directory to start with</param>
            <param name="arrayOfDirectoryNames">array of directory names</param>
            <param name="overrideExistingOnes">specyfies whether override existing directory tree</param>
            <returns>full path to the last created directory</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.FileAndDirectoryUtils.CreateDirectoryTree(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Creates directory tree. i.e. dir1/dir2/dir3/dir4  etc.
            </summary>
            <param name="rootDirectory">directory to start with</param>
            <param name="listOfDirectoryNames">list of directory names</param>
            <param name="overrideExistingOnes">specyfies whether override existing directory tree</param>
            <returns>full path to the last created directory</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils">
            <summary>
            Util class for common logging operations.
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.DATETIME_PATTERN">
            <summary>
            Converts DateTime object to string representation, e.g. 2016-03-24 18:41:00
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.DATE_PATTERN">
            <summary>
            Converts DateTime object to string representation, e.g. 2016-03-24
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.DATETIME_PATTERN_FOR_VERSIONING">
            <summary>
            Converts DateTime object to string representation, e.g. 2016-03-24 18:41:00:234
            </summary>
        </member>
        <member name="F:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.DATETIME_PATTERN_FOR_LOGGING">
            <summary>
            Converts DateTime object to string representation, e.g. 2016-03-24 18:41:00:234
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ApplySystemLogging(System.Boolean)">
            <summary>
            Applies system logging, [full date and time]  [type of logging] [full path to method]: user logging goes here.
            Otherwise user custom logging is applied.
            </summary>
            <param name="apply">whether to apply system logging or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.RedirectToCustomOutput(System.Boolean)">
            <summary>
            Redirects all logging output to custom location making it default logging output for the whole of the running program.
            </summary>
            <param name="redirect">whether to redirect logging output to custom location or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.RedirectToInMemoryLogger(System.Boolean)">
            <summary>
            Redirects all logging output to memory location making it default or one of the logging outputs for the whole of the running program.
            </summary>
            <param name="redirect">whether to redirect logging output to memory location or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.RedirectToTextFileLogger(System.String,System.Boolean,System.Boolean)">
            <summary>
            Redirects all logging output to file making it default or one of the logging outputs for the whole of the running program.
            </summary>
            <param name="fullPathToFile">full path to a log file</param>
            <param name="redirect">whether to redirect logging output to a file location or not</param>
            <param name="appendExecutionInvocationTimestamp">whether to append execution invocation date and time suffix</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.RedirectToDatabaseLogger(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Redirects all logging output to database table making it default or one of the logging outputs for the whole of the running program.
            </summary>
            <param name="connectionString">connection string to database</param>
            <param name="loggerTableName">database table name</param>
            <param name="commandTimeout">timeout for operation completion</param>
            <param name="redirect">whether to redirect logging output to database or not</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.RedirectToWindowsEventLog(System.String,System.Boolean,System.String,System.Int64,SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType,System.Boolean,System.Diagnostics.OverflowAction,System.Int32)">
            <summary>
            Redirects all logging output to Windows event log making it default or one of the logging outputs for the whole of the running program.
            </summary>
            <param name="source">source name to register</param>
            <param name="redirect">whether to redirect logging output to Windows event log or not</param>
            <param name="machineName">specifies name of a computer on which to read from or write to events</param>
            <param name="maximumKilobytes">specifies maximum log size</param>
            <param name="windowsEventLogType">specifies type of the EventLog</param>
            <param name="modifyOverflowPolicy">specifies whether to modify overflow policy</param>
            <param name="overflowAction">specifies how to deal with new entries when current log reaches its maximum size. This parameter is considered only if modifyOverflowPolicy is set to true</param>
            <param name="retentionDays">specifies number of days to retain entries in the current log. This parameter is considered only if modifyOverflowPolicy is set to true</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ChangeWindowsEventLogType(SoftwareDevelopment.Programming.CSharp.Utilities.WindowsEventLogType,System.Boolean,System.Diagnostics.OverflowAction,System.Int32)">
            <summary>
            Changes Windows EventLog type to which write or read from. 
            </summary>
            <param name="windowsEventLogType">specifies type of the EventLog</param>
            <param name="modifyOverflowPolicy">specifies whether to modify overflow policy</param>
            <param name="overflowAction">specifies how to deal with new entries when current log reaches its maximum size. This parameter is considered only if modifyOverflowPolicy is set to true</param>
            <param name="retentionDays">specifies number of days to retain entries in the current log. This parameter is considered only if modifyOverflowPolicy is set to true</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.FetchLoggerOuput">
            <summary>
            Fetches logger output.
            </summary>
            <returns>logger content</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.FetchInMemoryLoggerOuput">
            <summary>
            Fetches logger output.
            </summary>
            <returns>logger content</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.FetchFileLoggerOuput">
            <summary>
            Fetches logger output.
            </summary>
            <returns>logger content</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.FetchWindowsEventLogOuput(System.Boolean)">
            <summary>
            Fetches logger output.
            </summary>
            <param name="onlyCreatedByThisProgram">specifies whether to return entiries created by this program only or all entries from the log they were written to</param>
            <returns>logger content</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ClearInMemoryLogger">
            <summary>
            Clears logger content, so that it can be reused.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ClearWindowsEventLog(System.Boolean)">
            <summary>
            Clears logger content, so that it can be reused.
            <param name="releaseEventLogAcquiredResources">specifies whether to release resources' handles used by this EventLog instance</param>
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ReleaseWindowsEventLogAcquiredResources">
            <summary>
            Releases resources' handles used by this EventLog instance
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.LogStartTime(SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean)">
            <summary>
            Logs start time of the operation with logging options.
            Logging options will be applied if system logging is active. Otherwise user custom logging takes place.
            You can activate system logging with ApplySystemLogging(bool apply) method.
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.LogEndTime(SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean)">
            <summary>
            Logs end time of the operation with logging options.
            Logging options will be applied if system logging is active. Otherwise user custom logging takes place.
            You can activate system logging with ApplySystemLogging(bool apply) method.
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.Log(System.String,System.Boolean,SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean,System.String[])">
            <summary>
            Logs message to the default output.
            Logging options will be applied if system logging is active. Otherwise user custom logging takes place.
            You can activate system logging with ApplySystemLogging(bool apply) method.
            </summary>
            <param name="format">format of a message</param>
            <param name="goToNewLine">whether to break the line or not</param>
            <param name="formatParameters">values for format parameter</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.ComposeLoggingOutputLayout(System.Int32,System.Boolean,System.Boolean,System.Boolean,SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean)">
            <summary>
            Appends 'numberOfLines' empty lines to the current log. With default paramters invocation [ ComposeLoggingOutputLayout() ] it acts like deprecated metohod MoveToTheNextSection.
            In a nutchel what is does is the following: it adds horizontally or vertically number of spaces or tabulators to the appropriate logger or loggers depending on which loggers are active.
            Logging options will be applied if system logging is active. Otherwise user custom logging takes place.
            You can activate system logging with ApplySystemLogging(bool apply) method.
            </summary>
            <param name="numberOfLines">number of lines to move cursor downward</param>
            <param name="applyPreviousParameterValueOfTabulatorsInstead">whether to append tabulators instead of empty strings</param>
            <param name="goToNewLine">whether to break the line or not</param>
            <param name="applyOneSpaceString">whether to append one space striing instead of empty string</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.LogSummary(System.String[],System.String[],System.String[],System.String[],SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean)">
            <summary>
            Logs summary info about number of records to insert, update, delete, log.
            Can be used for any other type of logging. The idea is to provide some kind of summary information.
            Logging options will be applied if system logging is active. Otherwise user custom logging takes place.
            You can activate system logging with ApplySystemLogging(bool apply) method.
            </summary>
            <param name="labelValueItemsToInsert">records to insert - description + number of records (in the shape of key-value pairs: new string[] {"new items added", "5", ...})</param>
            <param name="labelValueItemsToUpdate">records to update - description + number of records (in the shape of key-value pairs: new string[] {"old items updated", "3", ...})</param>
            <param name="labelValueItemsToDelete">records to delete - description + number of records (in the shape of key-value pairs: new string[] {"old items deleted", "2", ...})</param>
            <param name="labelValueItemsToLog">records to log - description + number of records (in the shape of key-value pairs: new string[] {"new items logged", "7", ...})</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            <returns>void</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.LogObjectOnSuccess``1(``0,System.Boolean,System.Boolean,System.String,SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean,System.String[])">
            <summary>
            Logs object to active log storage or storages.
            </summary>
            <typeparam name="T">type of object</typeparam>
            <param name="item">object instance</param>
            <param name="applyUserCustomFormat">specifies whether apply user custom format or system default format</param>
            <param name="goToNewLine">whether to break the line or not</param>
            <param name="format">user custom format</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            <param name="formatParameters">values for format parameter</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.LogUtils.LogObjectOnFailure``1(``0,System.String,System.Boolean,System.Boolean,System.String,SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean,System.String[])">
            <summary>
            Logs object to active log storage or storages.
            </summary>
            <typeparam name="T">type of object</typeparam>
            <param name="item">object instance</param>
            <param name="exceptionMessage">exception message</param>
            <param name="applyUserCustomFormat">specifies whether apply user custom format or system default format</param>
            <param name="goToNewLine">whether to break the line or not</param>
            <param name="format">user custom format</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
            <param name="formatParameters">values for format parameter</param>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils">
            <summary>
            Util class for miscellaneous operations that do not fit into other utilities classes.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.BytesToString(System.Byte[])">
            <summary>
            Converts byte array to string.
            </summary>
            <param name="inputByteArray">array of bytes</param>
            <returns>bytes array converted to string representation</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.GetValue``1(System.Object,System.Boolean)">
            <summary>
            Check vlaue in case of NULL and returns approprite value instead, or trimmed value itself.
            </summary>
            <param name="input">input value</param>
            <param name="convertToStringAndTrimSpaces">specifies whether convert input value to string and apply trimming. Useful for types like string, int, double etc.</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringToByteArray(System.String)">
            <summary>
            Converts bytes array converted to string representation back to bytes array.
            </summary>
            <param name="inputByteArrayString">string representation of bytes array</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.GetDecryptedString(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts encrypted string back to plain text.
            </summary>
            <param name="encryptedText">encrypted text</param>
            <param name="userRsaPrivateKey">user private key to decrypt data</param>
            <returns>plain text</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.ValidateInputString(System.String,System.Boolean,System.String)">
            <summary>
            Validates input string by applying simple 'contains' rule or 'regex' rule and returns bool flag as a result of this validation.
            </summary>
            <param name="input">input string to be validated</param>
            <param name="complexValidation">true -> regex validation takes place, false -> simple inputString contains pattern operation takes place)</param>
            <param name="pattern">paattern to validate input string</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.NormalizePath(System.String)">
            <summary>
            Removes from a string characters that are considered as invalid path characters.
            </summary>
            <param name="path">file path to remove characters from</param>
            <returns>normalized path</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces all occurences of 'oldStringToBeReplaced' param value with 'newStringToReplaceWith' param value in the input string.
            </summary>
            <param name="inputString">input string</param>
            <param name="oldStringToBeReplaced">old string to be replaced</param>
            <param name="newStringToReplaceWith">new string to replace with</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.GetArrayFromString(System.String,System.Char)">
            <summary>
            Converts separator separated input string into array of items.
            </summary>
            <param name="separatorSeparatedListOfItems">string consisting of items to be splitted</param>
            <param name="separator">string items separator</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.RemoveSpacesFromString(System.String)">
            <summary>
            Removes spaces from string.
            </summary>
            <param name="inputString">input string</param>
            <returns>string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringJoin(System.String,System.String[],System.Boolean)">
            <summary>
            Concatenates array of strings using provided 'separator'.
            </summary>
            <param name="separator">separator to join array strings with</param>
            <param name="array">array of strings</param>
            <param name="addSeparatorToEnd">whether to add separator to the end of a joined string or not</param>
            <returns>string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringJoin(System.String,System.Char[],System.Boolean)">
            <summary>
            Concatenates array of chars using provided 'separator'.
            </summary>
            <param name="separator">separator to join array chars with</param>
            <param name="array">array of chars</param>
            <param name="addSeparatorToEnd">whether to add separator to the end of a joined string or not</param>
            <returns>string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringJoin(System.String,System.Collections.Generic.IList{System.Char},System.Boolean)">
            <summary>
            Concatenates list of chars using provided 'separator'.
            </summary>
            <param name="separator">separator to join list chars with</param>
            <param name="array">list of chars</param>
            <param name="addSeparatorToEnd">whether to add separator to the end of a joined string or not</param>
            <returns>string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringJoin(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Concatenates array of strings using provided 'separator'.
            </summary>
            <param name="separator">separator to join array strings with</param>
            <param name="list">list of strings</param>
            <param name="addSeparatorToEnd">whether to add separator to the end of a joined string or not</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.ConvertXmlStringToWellFormedXml(System.String)">
            <summary>
            Converts xml string to well formed xml.
            </summary>
            <param name="xmlString">xml data</param>
            <returns>well formed xml string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.RemoveEnters(System.String)">
            <summary>
            Removes new line breakers '\r\n' from multiline string.
            </summary>
            <param name="stringValue">input string</param>
            <returns>input string without new line breakers '\r\n'</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.StringReplace(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of oldValue in inputString with newValue.
            </summary>
            <param name="inputString">input string</param>
            <param name="oldValue">string to be replaced</param>
            <param name="newValue">string to replace with</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.ConvertListToArray``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Converts list of items of type T to array of items of type T.
            </summary>
            <typeparam name="T">type of list's item</typeparam>
            <param name="list">list of items</param>
            <param name="index">array index start position</param>
            <returns>array of type T</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.ConvertArrayToList``1(``0[])">
            <summary>
            Converts array of items of type T to list of items of type T.
            </summary>
            <typeparam name="T">type of array's item</typeparam>
            <param name="array">array of items</param>
            <returns>list of items of type T</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.RetrieveArrayOfT``1(System.Collections.ICollection)">
            <summary>
            Converts IEnumerable collection of items of type T to array of items of type T.
            </summary>
            <typeparam name="T">type of collection item</typeparam>
            <param name="collection">collection of items</param>
            <returns>array of items of type T</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.TakeFirstCollectionItems``1(System.Collections.ICollection,System.Int32)">
            <summary>
            Returns specified number of items from collection starting from the begining.
            </summary>
            <typeparam name="T">type of collection item</typeparam>
            <param name="collection">collection of items</param>
            <param name="numberOfItems">number of items to retrive</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.TakeLastCollectionItems``1(System.Collections.ICollection,System.Int32)">
            <summary>
            Returns specified number of items from collection starting from the end.
            </summary>
            <typeparam name="T">type of collection item</typeparam>
            <param name="collection">collection of items</param>
            <param name="numberOfItems">number of items to retrive</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.TakeCollectionItems``1(System.Collections.ICollection,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns specified range of items from collection from itemStartIndex to itemEndIndex.
            Only items within this range are accessed. There is no idle looping, that is other items are not being iterated over.
            Optimized for large collections: ~ > 1 000 000 items
            </summary>
            <typeparam name="T">type of collection item</typeparam>
            <param name="collection">collection of items</param>
            <param name="itemStartIndex">index to start retrieving items from</param>
            <param name="itemEndIndex">index to end retrieving items at</param>
            <param name="includeEdgeItems">index to end retrieving items at</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.AddEmptyItemsToColllection``1(System.Collections.ICollection,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T">type of collection item</typeparam>
            <param name="collection">collection of items</param>
            <param name="numberOfItems">number of items to add to the collection</param>
            <returns></returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.RemoveAssociationWithCurrentDataSet(System.Data.DataTable[])">
            <summary>
            Removes association with original DataSet object to which this array of DataTable objects belongs, allowing adding this array to new DataSet object.
            </summary>
            <param name="tables">array of DataTable objects</param>
            <returns>array of DataTable objects</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.MiscUtils.ConvertToBoolean(System.String)">
            <summary>
            Converts False or True string literal to Boolean type.
            </summary>
            <param name="trueFalseStringValue">False or True string literal</param>
            <returns>bool value of true or false</returns>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.ProcessUtils">
            <summary>
            Util class for common operations related to .NET Process class.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.ProcessUtils.RunProcess(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Run external process with provided parameters.
            </summary>
            <param name="processName">name of the process to run</param>
            <param name="processArgs">process arguments</param>
            <param name="redirectStandardOutput">specifies whether to redirect process output</param>
            <param name="pathToLogFile">path to log file</param>
            <param name="waitForExit">specifies whether to run process in an asynchronous way</param>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.RegexUtils">
            <summary>
            Util class for common regular expression operations.
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsUtils">
            <summary>
            Util class for common low level Windows operations.
            </summary>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsUtils.BeginImpersonationOfTheCurrentUser(System.String,System.String,System.String,System.String,SoftwareDevelopment.Programming.CSharp.Utilities.LogOperationTypeEnum,System.Boolean)">
            <summary>
            Elevates user privilages so that it gains access to read/write operations to a shared location.
            </summary>
            <param name="shareLocationDomain">domain of a shared location</param>
            <param name="shareLocationUrl">shared location url</param>
            <param name="shareLocationLogin">share login</param>
            <param name="shareLocationPassword">share password</param>
            <param name="logOperationType">specifies type of operation</param>
            <param name="includeInvocationTime">specifies whether to include timestamp</param>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.WindowsUtils.EndImpersonationOfTheCurrentUser">
            <summary>
            Downgrades user privilages to default user privilages. Body of the method is only invoked if user impersonation [ BeginImpersonationOfTheCurrentUser(...) ] actually took place.
            Otherwise invocation of this method acts like an empty method invocation.
            </summary>
        </member>
        <member name="T:SoftwareDevelopment.Programming.CSharp.Utilities.XmlUtils`1">
            <summary>
            Util class for common xml operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.XmlUtils`1.Serialize(System.IO.Stream,`0)">
            <summary>
            Serializes object instance to string representation.
            </summary>
            <param name="outputStream">output stream to serialize object to</param>
            <param name="node">object instance to serialize</param>
            <returns>object serialized as string</returns>
        </member>
        <member name="M:SoftwareDevelopment.Programming.CSharp.Utilities.XmlUtils`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes object back to object instance.
            </summary>
            <param name="inputStream">input stream to deserialize object from</param>
            <returns>object instance</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftwareDevelopment.Programming.CSharp.Utilities.XmlUtils`1.Serialize(System.IO.Stream,System.Collections.Generic.List{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:SoftwareDevelopment.Programming.CSharp.Utilities.XmlUtils`1.Deserialize(System.IO.Stream,System.Boolean)" -->
    </members>
</doc>
